package uk.ac.ebi.pride.mongodb.psm.model;

import org.bson.types.ObjectId;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.index.CompoundIndexes;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;
import uk.ac.ebi.pride.archive.dataprovider.data.SpectrumProvider;
import uk.ac.ebi.pride.archive.dataprovider.param.ParamProvider;

import java.util.Collection;
import java.util.List;
import java.util.Objects;

/**
 * The spectra Archive store all the spectrum in the PRIDE experiments.
 * @author Yasset Perez-Riverol
 * @version $Id$
 */
@Document(collection = "spectra")
@CompoundIndexes({
        @CompoundIndex(name = "projectAccession_msrun_idresultrun", def = "{'projectAccession' : 1, 'msRun': 1, 'idResultRun':1}", unique = true)
})
public class Spectrum implements SpectrumProvider{

    /** Accession generated by PRIDE Pipelines {@link SpectrumProvider}. **/
    @Indexed(unique=true)
    @Id
    private String id;

    /** Project Accession that contains the following spectra */
    private String projectAccession;

    /** Accession to the msRun that contains the following Spectra. */
    private String msRun;

    /**
     * The Id Result Run Accession provided by PRIDE pipelines
     */
    private String idResultRun;

    /** Precursor Charge in the mgf File. */
    private int precursorCharge;

    /** Precursor MZ */
    private double precursorMz;

    /** Precursor Intensity */
    private double precursorIntensity;

    /** MS Level */
    private int msLevel;

    /** Retention Time */
    private List<Long> retentionTime;

    /** Identify or not in the PX Project */
    private boolean identifiedSpectrum;

    /** Peak Intensity List */
    private double[] peaksIntensityValues;

    /** MZ Intensity List */
    private double[] peaksMzValues;

    /** Total Number of Peaks */
    private int numPeaks;

    /** The attributes for the Spectrum */
    private Collection<ParamProvider> attributes;

    /**
     * Hash Number generated for the Spectrum using the Splash Algorithm:
     * GitHub Repository: https://github.com/berlinguyinca/spectra-hash
     * Manuscript: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5515539/
     */
    private String splash;

    /**
     * @return Unique Identifier of the Spectra
     */
    public String getId() {
        return id;
    }

    /**
     * Set the corresponding identifier in the System.
     * @param id Unique identifier
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * @return projectAccession
     */
    public String getProjectAccession() {
        return projectAccession;
    }

    /**
     * Set the project Accession
     * @param projectAccession
     */
    public void setProjectAccession(String projectAccession) {
        this.projectAccession = projectAccession;
    }

    /**
     * @return precursorCharge
     */
    @Override
    public int getPrecursorCharge() {
        return precursorCharge;
    }

    /**
     * Returns the MS Level of the Spectrum
     * @return MS Level
     */
    @Override
    public int getMSLevel() {
        return msLevel;
    }

    /**
     * Return true if the spectrum is identified, false if is not identified
     * @return if spectrum identified
     */
    @Override
    public boolean isIdentified() {
        return identifiedSpectrum;
    }

    /**
     * @param precursorCharge Set the Precursor Charge for the Spectra
     */
    public void setPrecursorCharge(int precursorCharge) {
        this.precursorCharge = precursorCharge;
    }

    /**
     * Get Intensity Values for the MS Spectrum. The Order of the the array is important because is correlated
     * with the mzValues.
     * @return Intensity Array
     */
    @Override
    public double[] getPeaksIntensityValues() {
        return peaksIntensityValues;
    }

    /**
     * Set the peaks Intensity Values
     * @param peaksIntensityValues
     */
    public void setPeaksIntensityValues(double[] peaksIntensityValues) {
        this.peaksIntensityValues = peaksIntensityValues;
    }


    /**
     * Get the MzValues for the spectra. The order of the array is important because is correlated with the
     * IntensityValues
     * @return
     */
    @Override
    public double[] getPeaksMzValues() {
        return peaksMzValues;
    }

    /**
     * @return Get precursor Mz Value
     */
    @Override
    public double getPrecursorMz() {
        return precursorMz;
    }


    /**
     * @param precursorMz returns the precursorMZ
     */
    public void setPrecursorMz(double precursorMz) {
        this.precursorMz = precursorMz;
    }

    /**
     * @return returns the Precursor Intensity
     */
    public double getPrecursorIntensity() {
        return precursorIntensity;
    }

    /**
     * Set precursor Intensity
     * @param precursorIntensity
     */
    public void setPrecursorIntensity(double precursorIntensity) {
        this.precursorIntensity = precursorIntensity;
    }

    /**
     * Set Ms Level it can be 1, 2, 3 ..
     * @param msLevel Level of the MS
     */
    public void setMsLevel(int msLevel) {
        this.msLevel = msLevel;
    }

    /**
     * @return Get retention time values
     */
    public List<Long> getRetentionTime() {
        return retentionTime;
    }

    /**
     * Set Retention time Values
     * @param retentionTime retention time values
     */
    public void setRetentionTime(List<Long> retentionTime) {
        this.retentionTime = retentionTime;
    }

    /**
     * @return Returns the number of Peaks
     */
    public int getNumPeaks() {
        return numPeaks;
    }

    /**
     * Set the number of peaks, this number will match must of the time with the total number in IntesityValues and MzValues.
     * @param numPeaks set number of peaks.
     */
    public void setNumPeaks(int numPeaks) {
        this.numPeaks = numPeaks;
    }

    /**
     * The plash can be used to compare spectrums in the future but has been demonstrated that has clash within to non equal spectra.
     * @return splash hash
     */
    public String getSplash() {
        return splash;
    }

    /**
     * Set the splash value
     * @param splash
     */
    public void setSplash(String splash) {
        this.splash = splash;
    }

    /**
     * @return related attributes for the spectrum in CvParams Format
     */
    @Override
    public Collection<ParamProvider> getParams() {
        return attributes;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Spectrum)) return false;
        Spectrum spectrum = (Spectrum) o;
        return Objects.equals(id, spectrum.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }
}
